[buildout]
prefer-final = false
newest = false
download-cache = .cache
develop = .
parts = 

[project]
name = infi.logging
homepage = https://github.com/Infinidat/${project:name}
company = Infinidat
namespace_packages = ['infi']
install_requires = [
	'infi.registry',
	'Logbook',
	'setuptools',
	'six'
	]
version_file = src/infi/logging/__version__.py
description = Extensions for logbook, such as Windows EventLog handler.
long_description = Extensions for logbook, such as Windows EventLog handler.
console_scripts = []
gui_scripts = []
package_data = ['*dll']
upgrade_code = None
product_name = ${project:name}
post_install_script_name = None
pre_uninstall_script_name = None
infi_logging_formatter_plugins = [
	'channel = infi.logging.plugins.channel:ChannelFormatterPlugin',
	'log_level = infi.logging.plugins.log_level:LogLevelFormatterPlugin',
	'message = infi.logging.plugins.message:MessageFormatterPlugin',
	'hostname = infi.logging.plugins.hostname:HostNameFormatterPlugin',
	'greenlet_id = infi.logging.plugins.greenlet_id:GreenletIDFormatterPlugin',
	'procname = infi.logging.plugins.procname:ProcnameFormatterPlugin',
	'request_id_tag = infi.logging.plugins.request_id_tag:RequestIDTagFormatterPlugin',
	'process_id = infi.logging.plugins.process_id:ProcessIDFormatterPlugin',
	'thread_id = infi.logging.plugins.thread_id:ThreadIDFormatterPlugin',
	'time = infi.logging.plugins.time:TimeFormatterPlugin']
infi_logging_injector_plugins = [
	'hostname = infi.logging.plugins.hostname:HostNameInjectorPlugin',
	'greenlet_id = infi.logging.plugins.greenlet_id:GreenletIDInjectorPlugin',
	'procname = infi.logging.plugins.procname:ProcnameInjectorPlugin',
	'request_id_tag = infi.logging.plugins.request_id_tag:RequestIDTagInjectorPlugin',
	'thread_id = infi.logging.plugins.thread_id:ThreadIDInjectorPlugin']

[isolated-python]
recipe = infi.recipe.python
version = v2.7.8.11

[setup.py]
recipe = infi.recipe.template.version
input = setup.in
output = setup.py

[__version__.py]
recipe = infi.recipe.template.version
output = ${project:version_file}

[development-scripts]
dependent-scripts = true
recipe = infi.recipe.console_scripts
eggs = infi.traceback
	${project:name}
	infi.unittest
	pylint
	gevent
	nose
	coverage
	ipython
	infi.nose_plugins
	mock
interpreter = python

[pack]
recipe = infi.recipe.application_packager

[sublime]
recipe = corneti.recipes.codeintel
eggs = ${development-scripts:eggs}

